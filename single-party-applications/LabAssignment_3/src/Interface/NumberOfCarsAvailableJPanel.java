/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.FleetOfCars;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class NumberOfCarsAvailableJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NumberOfCarsAvailableJPanel
     */
    private JPanel userProcessContainer;
    private FleetOfCars fleetOfCars;

    NumberOfCarsAvailableJPanel(JPanel userProcessContainer, FleetOfCars fleetOfCars) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.fleetOfCars = fleetOfCars;
        populate(fleetOfCars.getFleetOfCars());
        displayNumbers();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        availableCheckBox = new javax.swing.JCheckBox();
        notAvailableCheckBox = new javax.swing.JCheckBox();
        availableTextField = new javax.swing.JTextField();
        notAvailableTextField = new javax.swing.JTextField();
        totalTextField = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        viewCarDetailsBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("NUMBER OF AVAILABLE /NOT AVAILABLE CARS");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        viewJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Car Name", "City", "Manufacturer", "Year Of Manufacture", "Serial Number", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewJTable);

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setText("Total Number Of Cars:");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel3.setText("Number Of Availiable Cars:");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel4.setText("Number Of Not Availiable Cars:");

        availableCheckBox.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        availableCheckBox.setText("Available");
        availableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableCheckBoxActionPerformed(evt);
            }
        });

        notAvailableCheckBox.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        notAvailableCheckBox.setText("Not Available");
        notAvailableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notAvailableCheckBoxActionPerformed(evt);
            }
        });

        availableTextField.setEditable(false);
        availableTextField.setEnabled(false);

        notAvailableTextField.setEditable(false);
        notAvailableTextField.setEnabled(false);

        totalTextField.setEditable(false);
        totalTextField.setEnabled(false);

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("<< BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewCarDetailsBtn.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        viewCarDetailsBtn.setText("View Car Details");
        viewCarDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCarDetailsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(availableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(notAvailableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(230, 230, 230)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(availableCheckBox)
                            .addComponent(notAvailableCheckBox)
                            .addComponent(viewCarDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(availableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(notAvailableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(notAvailableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewCarDetailsBtn)))
                .addGap(195, 195, 195))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void populate(ArrayList<Car> displayList) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) viewJTable.getModel();
        defaultTableModel.setRowCount(0);
        for (Car car : displayList) {
            Object[] row = new Object[6];
            row[0] = car;
            row[1] = car.getCityOfOrigin();
            row[2] = car.getManufacturer();
            row[3] = car.getYearOFManufacture();
            row[4] = car.getSerialNumber();
            if (car.isAvailability()) {
                row[5] = "Available";
            } else {
                row[5] = "Not Available";
            }
            defaultTableModel.addRow(row);
        }
    }

    private void actionCheck() {
        if (availableCheckBox.isSelected() && !notAvailableCheckBox.isSelected()) {
            //Show Available
            ArrayList<Car> availableList = new ArrayList<Car>();
            for (Car fleetOfCar : fleetOfCars.getFleetOfCars()) {
                if (fleetOfCar.isAvailability()) {
                    availableList.add(fleetOfCar);
                }
            }
            if (availableList != null && !availableList.isEmpty()) {
                populate(availableList);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry!! There are no cars available for this selection.");
                availableCheckBox.setSelected(false);
            }

        } else if (!availableCheckBox.isSelected() && notAvailableCheckBox.isSelected()) {
            // Show Not Available
            ArrayList<Car> notAvailableList = new ArrayList<Car>();
            for (Car fleetOfCar : fleetOfCars.getFleetOfCars()) {
                if (!fleetOfCar.isAvailability()) {
                    notAvailableList.add(fleetOfCar);
                }
            }
            if (notAvailableList != null && !notAvailableList.isEmpty()) {
                populate(notAvailableList);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry!! There are no cars available for this selection.");
                notAvailableCheckBox.setSelected(false);
            }
        } else {
            // Show Both
            populate(fleetOfCars.getFleetOfCars());
        }
    }

    public void displayNumbers() {
        int available = 0;
        int notAvailable = 0;
        int total = 0;
        for (Car fleetOfCar : fleetOfCars.getFleetOfCars()) {
            if (fleetOfCar.isAvailability()) {
                available++;
            } else {
                notAvailable++;
            }
        }
        total = available + notAvailable;
        totalTextField.setText(total + "");
        notAvailableTextField.setText(notAvailable + "");
        availableTextField.setText(available + "");
    }

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewCarDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCarDetailsBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = viewJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select A Row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Car car = (Car) viewJTable.getValueAt(selectedRow, 0);
            SearchViewJPanel searchViewJPanel = new SearchViewJPanel(userProcessContainer, car);
            userProcessContainer.add("SearchViewJPanel", searchViewJPanel);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(userProcessContainer);
        }
        
    }//GEN-LAST:event_viewCarDetailsBtnActionPerformed

    private void availableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableCheckBoxActionPerformed
        // TODO add your handling code here:
        actionCheck();
    }//GEN-LAST:event_availableCheckBoxActionPerformed

    private void notAvailableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notAvailableCheckBoxActionPerformed
        // TODO add your handling code here:
        actionCheck();
    }//GEN-LAST:event_notAvailableCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availableCheckBox;
    private javax.swing.JTextField availableTextField;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox notAvailableCheckBox;
    private javax.swing.JTextField notAvailableTextField;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JButton viewCarDetailsBtn;
    private javax.swing.JTable viewJTable;
    // End of variables declaration//GEN-END:variables
}
